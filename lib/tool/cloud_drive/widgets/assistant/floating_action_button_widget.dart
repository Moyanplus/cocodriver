import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../config/cloud_drive_ui_config.dart';
import '../../data/models/cloud_drive_entities.dart';
import '../../providers/cloud_drive_provider.dart';
import '../../../../core/logging/log_manager.dart';

/// ÊÇ¨ÊµÆÊåâÈíÆÁªÑ‰ª∂
class FloatingActionButtonWidget extends ConsumerWidget {
  const FloatingActionButtonWidget({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final state = ref.watch(cloudDriveProvider);

    // Â¶ÇÊûúÊúâÂæÖÊìç‰ΩúÁöÑÊñá‰ª∂ÔºåÊòæÁ§∫Êìç‰ΩúÊåâÈíÆ
    if (state.showFloatingActionButton && state.pendingOperationFile != null) {
      final file = state.pendingOperationFile!;
      final operationType = state.pendingOperationType;

      return FloatingActionButton.extended(
        onPressed: () => _handleOperation(context, ref, file, operationType),
        backgroundColor:
            operationType == 'copy'
                ? CloudDriveUIConfig.infoColor
                : CloudDriveUIConfig.warningColor,
        foregroundColor: Colors.white,
        icon: Icon(
          operationType == 'copy' ? Icons.copy : Icons.drive_file_move,
        ),
        label: Text(operationType == 'copy' ? 'Â§çÂà∂Êñá‰ª∂' : 'ÁßªÂä®Êñá‰ª∂'),
      );
    }

    // ÈªòËÆ§ÊòæÁ§∫Ê∑ªÂä†Ë¥¶Âè∑ÊåâÈíÆ
    return FloatingActionButton(
      onPressed: () => _showAddAccountDialog(context, ref),
      backgroundColor: CloudDriveUIConfig.primaryActionColor,
      foregroundColor: Colors.white,
      child: const Icon(Icons.add),
    );
  }

  /// Â§ÑÁêÜÊñá‰ª∂Êìç‰Ωú
  Future<void> _handleOperation(
    BuildContext context,
    WidgetRef ref,
    CloudDriveFile file,
    String? operationType,
  ) async {
    final notifier = ref.read(cloudDriveProvider.notifier);

    LogManager().cloudDrive('üéØ ÊÇ¨ÊµÆÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂ÂºÄÂßã');
    LogManager().cloudDrive('üìÑ ÂæÖÊìç‰ΩúÊñá‰ª∂: ${file.name}');
    LogManager().cloudDrive('üîß Êìç‰ΩúÁ±ªÂûã: ${operationType}');

    try {
      // ÊâßË°åÊìç‰Ωú
      LogManager().cloudDrive('üöÄ Ë∞ÉÁî® executePendingOperation');
      final success = await notifier.executePendingOperation();
      LogManager().cloudDrive('‚úÖ executePendingOperation ÊâßË°åÂÆåÊàêÔºåÁªìÊûú: $success');

      // Ê†πÊçÆÊìç‰ΩúÁªìÊûúÊòæÁ§∫‰∏çÂêåÁöÑÊèêÁ§∫
      if (context.mounted) {
        if (success) {
          LogManager().cloudDrive('üì± ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫ SnackBar');
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'Êñá‰ª∂${operationType == 'copy' ? 'Â§çÂà∂' : 'ÁßªÂä®'}ÊàêÂäü: ${file.name}',
              ),
              backgroundColor: CloudDriveUIConfig.successColor,
              duration: const Duration(seconds: 3),
            ),
          );
          LogManager().cloudDrive('‚úÖ ÊàêÂäü SnackBar ÊòæÁ§∫ÂÆåÊàê');
        } else {
          LogManager().cloudDrive('üì± ÊòæÁ§∫Â§±Ë¥•ÊèêÁ§∫ SnackBar');
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'Êñá‰ª∂${operationType == 'copy' ? 'Â§çÂà∂' : 'ÁßªÂä®'}Â§±Ë¥•: ${file.name}',
              ),
              backgroundColor: CloudDriveUIConfig.errorColor,
              duration: const Duration(seconds: 3),
            ),
          );
          LogManager().cloudDrive('‚úÖ Â§±Ë¥• SnackBar ÊòæÁ§∫ÂÆåÊàê');
        }
      } else {
        LogManager().cloudDrive('‚ö†Ô∏è Widget Â∑≤Âç∏ËΩΩÔºåÊó†Ê≥ïÊòæÁ§∫ SnackBar');
      }
    } catch (e) {
      LogManager().error('‚ùå ÊâßË°åÊìç‰ΩúÊó∂ÂèëÁîüÂºÇÂ∏∏', exception: e);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Êìç‰ΩúÂ§±Ë¥•: $e'),
            backgroundColor: CloudDriveUIConfig.errorColor,
            duration: const Duration(seconds: 3),
          ),
        );
      }
    }
  }

  /// ÊòæÁ§∫Ê∑ªÂä†Ë¥¶Âè∑ÂØπËØùÊ°Ü
  void _showAddAccountDialog(BuildContext context, WidgetRef ref) {
    // ËøôÈáåÈúÄË¶ÅÂØºÂÖ•AddAccountFormWidgetÔºåÊöÇÊó∂Áî®ÁÆÄÂçïÁöÑÂØπËØùÊ°Ü‰ª£Êõø
    showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: Text('Ê∑ªÂä†Ë¥¶Âè∑'),
            content: Text('Ê∑ªÂä†Ë¥¶Âè∑ÂäüËÉΩÈúÄË¶Å‰ªéÂéüÈ°µÈù¢ÂØºÂÖ•'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text('ÂÖ≥Èó≠'),
              ),
            ],
          ),
    );
  }
}
